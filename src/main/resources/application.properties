
##config kafka
#spring.kafka.consumer.bootstrap-servers=localhost:9092
#spring.kafka.consumer.group-id=myGroup
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
##spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*
#spring.kafka.consumer.properties.spring.json.add.type.headers=false
#spring.kafka.consumer.properties.spring.json.value.default.type=com.kafkaservice.payload.MessageKafka
#
#spring.kafka.producer.bootstrap-servers=localhost:9092
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
##spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.properties.spring.json.add.type.headers=false
#spring.kafka.producer.properties.spring.json.value.default.type=com.kafkaservice.payload.MessageKafka

#db config
#spring.datasource.url=jdbc:mysql://host.docker.internal:3307/learn_web
spring.datasource.url=jdbc:mysql://localhost:3306/learn_web
spring.datasource.username=root
spring.datasource.password=123456
spring.jpa.hibernate.ddl-auto=update
## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.data.redis.repositories.enabled=false

#delete trace responsive when throw exception
server.error.include-stacktrace=on_trace_param

server.port=8082
