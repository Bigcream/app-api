
##config kafka
#spring.kafka.producer.properties.spring.json.add.type.headers=false
#spring.kafka.consumer.properties.spring.json.add.type.headers=false
spring.kafka.consumer.bootstrap-servers=34.125.61.183:30718
spring.kafka.consumer.group-id=myGroup
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.producer.bootstrap-servers=34.125.61.183:30718
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.bootstrap-servers=34.125.61.183:30718

#db config
#spring.datasource.url=jdbc:mysql://host.docker.internal:3307/learn_web
spring.datasource.url=jdbc:mysql:///learn_web?cloudSqlInstance=autonomous-time-380112:us-west3:mysql&socketFactory=com.google.cloud.sql.mysql.SocketFactory&user=root&password=123456
spring.datasource.username=root
spring.datasource.password=123456
spring.jpa.hibernate.ddl-auto=update

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.data.redis.repositories.enabled=false

#delete trace responsive when throw exception
server.error.include-stacktrace=on_trace_param

server.port=8084

#mongodb config
spring.data.mongodb.authentication-database=admin
spring.data.mongodb.username=admin
spring.data.mongodb.password=admin
spring.data.mongodb.database=app_api
spring.data.mongodb.port=30000
spring.data.mongodb.host=34.125.61.183

